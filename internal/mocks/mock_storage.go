// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/handlers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/dvkhr/metrix.git/internal/service"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricStorage is a mock of MetricStorage interface.
type MockMetricStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMetricStorageMockRecorder
}

// MockMetricStorageMockRecorder is the mock recorder for MockMetricStorage.
type MockMetricStorageMockRecorder struct {
	mock *MockMetricStorage
}

// NewMockMetricStorage creates a new mock instance.
func NewMockMetricStorage(ctrl *gomock.Controller) *MockMetricStorage {
	mock := &MockMetricStorage{ctrl: ctrl}
	mock.recorder = &MockMetricStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricStorage) EXPECT() *MockMetricStorageMockRecorder {
	return m.recorder
}

// CheckStorage mocks base method.
func (m *MockMetricStorage) CheckStorage() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStorage")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckStorage indicates an expected call of CheckStorage.
func (mr *MockMetricStorageMockRecorder) CheckStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStorage", reflect.TypeOf((*MockMetricStorage)(nil).CheckStorage))
}

// FreeStorage mocks base method.
func (m *MockMetricStorage) FreeStorage() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeStorage")
	ret0, _ := ret[0].(error)
	return ret0
}

// FreeStorage indicates an expected call of FreeStorage.
func (mr *MockMetricStorageMockRecorder) FreeStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeStorage", reflect.TypeOf((*MockMetricStorage)(nil).FreeStorage))
}

// Get mocks base method.
func (m *MockMetricStorage) Get(ctx context.Context, metricName string) (*service.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, metricName)
	ret0, _ := ret[0].(*service.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricStorageMockRecorder) Get(ctx, metricName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricStorage)(nil).Get), ctx, metricName)
}

// List mocks base method.
func (m *MockMetricStorage) List(ctx context.Context) (*map[string]service.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(*map[string]service.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMetricStorageMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMetricStorage)(nil).List), ctx)
}

// ListSlice mocks base method.
func (m *MockMetricStorage) ListSlice(ctx context.Context) ([]service.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSlice", ctx)
	ret0, _ := ret[0].([]service.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSlice indicates an expected call of ListSlice.
func (mr *MockMetricStorageMockRecorder) ListSlice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSlice", reflect.TypeOf((*MockMetricStorage)(nil).ListSlice), ctx)
}

// NewStorage mocks base method.
func (m *MockMetricStorage) NewStorage() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStorage")
	ret0, _ := ret[0].(error)
	return ret0
}

// NewStorage indicates an expected call of NewStorage.
func (mr *MockMetricStorageMockRecorder) NewStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStorage", reflect.TypeOf((*MockMetricStorage)(nil).NewStorage))
}

// Save mocks base method.
func (m *MockMetricStorage) Save(ctx context.Context, mt service.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, mt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricStorageMockRecorder) Save(ctx, mt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricStorage)(nil).Save), ctx, mt)
}

// SaveAll mocks base method.
func (m *MockMetricStorage) SaveAll(ctx context.Context, mt *[]service.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", ctx, mt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockMetricStorageMockRecorder) SaveAll(ctx, mt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockMetricStorage)(nil).SaveAll), ctx, mt)
}
