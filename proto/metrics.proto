syntax = "proto3";

package metrics;
option go_package = "github.com/dvkhr/metrix.git/internal/grpc";

// MetricType представляет тип метрики.
enum MetricType {
    GAUGE = 0;   
    COUNTER = 1; 
}

// MetricRequest представляет запрос на отправку метрики.
message MetricRequest {
    string id = 1;         
    MetricType type = 2;   
    double value = 3;      
    int64 delta = 4;       
}

// MetricResponse представляет ответ на запрос.
message MetricResponse {
    bool success = 1;      
    string message = 2;    
}

// BatchRequest представляет запрос на пакетное обновление метрик.
message BatchRequest {
    repeated MetricRequest metrics = 1; 
}

// BatchResponse представляет ответ на пакетное обновление метрик.
message BatchResponse {
    bool success = 1;                   
    string message = 2;                
    repeated MetricRequest metrics = 3; 
}

// GetAllMetricsRequest представляет запрос на получение всех метрик.
message GetAllMetricsRequest {}

// GetAllMetricsResponse представляет ответ с массивом всех метрик.
message GetAllMetricsResponse {
    repeated MetricRequest metrics = 1; 
}

// MetricsService предоставляет методы для работы с метриками.
service MetricsService {
    // SendMetric отправляет одну метрику.
    rpc SendMetric(MetricRequest) returns (MetricResponse);

    // BatchUpdate отправляет пакет метрик.
    rpc BatchUpdate(BatchRequest) returns (BatchResponse);

    // GetMetric получает значение метрики по её ID.
    rpc GetMetric(MetricRequest) returns (MetricResponse);

    // GetAllMetrics получает все метрики.
    rpc GetAllMetrics(GetAllMetricsRequest) returns (GetAllMetricsResponse);

    // CheckDBConnect проверяет подключение к базе данных.
    rpc CheckDBConnect(GetAllMetricsRequest) returns (MetricResponse);
}